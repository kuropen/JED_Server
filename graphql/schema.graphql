scalar Date

type Area {
    id: Int!
    code: String!
    name: String!
    longName: String!
    officialWeb: String!
    csvFile: String!
    csvFiveMinPos: Int!
    csvHourlyPos: Int!
    hasWindData: Boolean
    peak: [PeakElectricity]
    hourly: [HourlyDemand]
}

enum PeakType {
   AMOUNT
   PERCENTAGE 
}

type PeakElectricity {
    id: Int!
    createdAt: Date!
    updatedAt: Date!
    areaId: Int!
    date: Date!
    expectedHour: String!
    type: PeakType!
    percentage: Int!
    reservePct: Int
    isTomorrow: Boolean
    amount: Int!
    supply: Int!
}

input PeakElectricityInput {
    areaId: Int!
    date: String!
    expectedHour: String!
    type: PeakType!
    percentage: Int!
    reservePct: Int
    isTomorrow: Boolean
    amount: Int!
    supply: Int!
}

type HourlyDemand {
    id: Int!
    createdAt: Date!
    updatedAt: Date!
    areaId: Int!
    date: Date!
    hour: Int!
    amount: Int!
    supply: Int!
    percentage: Int!
    absTime: Date
}

input HourlyDemandInput {
    areaId: Int!
    date: String!
    hour: Int!
    amount: Int!
    supply: Int!
    percentage: Int!
}

type FiveMinDemand {
    id: Int!
    createdAt: Date!
    updatedAt: Date!
    areaId: Int!
    date: Date!
    time: String!
    amount: Int!
    solar: Int
    wind: Int
    absTime: Date
}

input FiveMinDemandInput {
    areaId: Int!
    date: String!
    time: String!
    amount: Int!
    solar: Int
    wind: Int
}

type Query {
    authorized: Boolean
    message: String
    allArea: [Area!]!
    areaByCode(code: String!): Area
    peakElectricity(date: String, type: PeakType, areaCode: String): [PeakElectricity]
    hourlyDemand(areaCode: String, limit: Int): [HourlyDemand]
    fiveMinDemand(areaCode: String, limit: Int): [FiveMinDemand]
}

type Mutation {
    postPeakElectricity(peakInput: PeakElectricityInput): PeakElectricity
    postHourlyDemand(hourlyInput: HourlyDemandInput): HourlyDemand
    postFiveMinDemand(fiveInput: FiveMinDemandInput): FiveMinDemand
}